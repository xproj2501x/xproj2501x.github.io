/**
 * Keyboard
 * ===
 *
 * @module inputManager.Keyboard
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Key from './key';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const KEY_DOWN = 'keydown';
const KEY_UP = 'keyup';

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Keyboard
 * @class
 */
class Keyboard {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {array}
   */
  _keys;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @public
   * @readonly
   * @return {array}
   */
  get keys() {
    return this._keys;
  }

  /**
   * Keyboard
   * @constructor
   */
  constructor() {
    this._keys = [];
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  start() {
    this._keys = [];
    document.addEventListener(KEY_DOWN, (event) => this.onKey(event));
    document.addEventListener(KEY_UP, (event) => this.onKey(event));
  }

  stop() {
    document.removeEventListener(KEY_DOWN, (event) => this.onKey(event));
    document.removeEventListener(KEY_UP, (event) => this.onKey(event));
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   *
   * @return {Keyboard} - A new keyboard instance.
   */
  static createInstance() {
    return new Keyboard();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Keyboard;
