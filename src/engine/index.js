/**
 * Engine
 * ===
 *
 * @module engine
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import SystemManager from '../ecs/system-manager';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////

/**
 * Engine
 * @class
 */
class Engine {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The logger for the class.
   * @private
   * @type {Logger}
   */
  _logger;

  /**
   * @private
   * @type {Boolean}
   */
  _isLocked;

  /**
   * @private
   * @type {SystemManager}
   */
  _systemManager;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Engine
   * @constructor
   * @param {LogService} logService - The log service for the simulation.
   * @param {SystemManager} systemManager -
   */
  constructor(logService, systemManager) {
    this._logger = logService.register(this.constructor.name);
    this._isLocked = false;
    this._systemManager = systemManager;

  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  update() {
    if (this._isLocked) {
      console.log(`engine is currently locked, ignoring action`);
      return null;
    }
    this._isLocked = true;
    this._systemManager.update();
    this._isLocked = false;
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////


  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Static factory method.
   *
   * @static
   * @param {LogService} logService - The log service for the simulation.
   * @param {StateManager} stateManager -
   * @param {Array} systems -
   *
   * @return {Engine}
   */
  static createInstance(logService, stateManager, systems) {
    const SYSTEM_MANAGER = SystemManager.createInstance(logService, stateManager, systems);

    return new Engine(logService, SYSTEM_MANAGER);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Engine;
