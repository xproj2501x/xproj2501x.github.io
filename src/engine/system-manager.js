/**
 * System Manager
 * ===
 *
 * @module systemManager
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * SystemManager
 * @class
 */
class SystemManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {Logger}
   */
  _logger;

  /**
   * @private
   * @type {MessageService}
   */
  _messageService;

  /**
   * Collection of systems registered for the simulation.
   * @private
   * @type {Array}
   */
  _systems;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * SystemManager
   * @constructor
   * @param {LogService} logService
   * @param {MessageService} messageService
   * @param {Array} systems
   */
  constructor(logService, messageService, systems) {
    this._messageService = messageService;
    this._systems = systems;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Calls the update method for each registered system.
   * @public
   */
  update() {
    this._systems.forEach((system) => {
      system.update();
    });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Static factory method.
   * @param {ComponentManager} componentManager - The component manager for the simulation.
   * @param {Array} systems -
   *
   * @return {SystemManager} - A new system manager instance.
   */
  static create(componentManager, systems) {
    const SYSTEMS = [];

    systems.forEach((system) => {
      SYSTEMS.push(system.create(componentManager));
    });
    return new SystemManager(componentManager, SYSTEMS);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default SystemManager;
