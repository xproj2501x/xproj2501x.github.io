/**
 * User Interface
 * ===
 *
 * @module userInterface
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const DEFAULT = {
  WIDTH: 100,
  HEIGHT: 75,
  UNIT: 12,
  SCALE: 1,
  PARENT: 'app'
};

const INPUT_EVENTS = [
  'keypress',
  'keydown',
  'keyup',
  'click',
  'dblclick',
  'mousedown',
  'mouseup',
  'wheel',
  'mousemove',
  'contextmenu'
];
////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * UserInterface
 * @class
 */
class UserInterface {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The logger for the class.
   * @private
   * @type {Logger}
   */
  _logger;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * UserInterface
   * @constructor
   * @param {LogService} logService - The log service for the simulation.
   */
  constructor(logService) {
    this._logger = logService.register(this.constructor.name);

  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  enter() {
    INPUT_EVENTS.forEach((event) => {
      document.addEventListener(event, (event) => this._handleInput(event));
    });
  }

  exit() {
    INPUT_EVENTS.forEach((event) => {
      document.removeEventListener(event, (event) => this._handleInput(event));
    });
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  /**
   *
   * @param {object} event -
   * @private
   */
  _handleInput(event) {
    event.stopPropagation();
    event.preventDefault();

  }


  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @param {LogService} logService -
   *
   * @return {UserInterface} - A new display manager instance.
   */
  static createInstance(logService) {
    return new UserInterface(logService);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default UserInterface;
