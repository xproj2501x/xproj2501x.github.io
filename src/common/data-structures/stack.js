/**
 * Stack
 * ===
 *
 * @module stack
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Stack
 * @class
 */
class Stack {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {array}
   */
  _data;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Get _data.length
   * @public
   * @readonly
   *
   * @return {number} The length of the stack.
   */
  get size() {
    return this._data.length;
  }

  /**
   * Stack
   * @constructor
   */
  constructor() {
    this._data = [];
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Clears the stack
   */
  clear() {
    this._data = [];
  }

  /**
   * Returns the first element of the stack if available without removing it.
   *
   * @return {object} The first element in the stack
   */
  peek() {
    if (!this._data.length) {return null;}
    return this._data[0];
  }

  /**
   * Pops an element from the top of the stack.
   *
   * @return {object} The popped element.
   */
  pop() {
    return this._data.pop();
  }

  /**
   * Pushes a new element to the top of the stack.
   * @param {object} element - The element to be added.
   */
  push(element) {
    this._data.push(element);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   *
   * @return {Stack} A new stack instance.
   */
  static createInstance() {
    return new Stack();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Stack;
