/**
 * Binary Heap
 * ===
 *
 * @module binaryHeap
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////

/**
 * BinaryHeap
 * @class
 */
class BinaryHeap {
  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The contents of the binary heap.
   * @private
   * @type {Array}
   */
  _data;

  /**
   * The total number of nodes in the tree.
   * @private
   * @type {number}
   */
  _size;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * BinaryHeap
   * @constructor
   */
  constructor() {
    this._data = [];
    this._size = 0;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Inserts a new element into the binary heap.
   * @public
   * @param {object} element - The element to be inserted.
   */
  insert(element) {
    this._data.push(element);
    this._size++;
  }

  /**
   * Clears the binary heap.
   * @public
   */
  clear() {
    this._size = 0;
    this._data = [];
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _sinkDown() {

  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   *
   * @return {BinaryHeap} A new binary heap instance.
   */
  static createInstance() {
    return new BinaryHeap();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default BinaryHeap;
