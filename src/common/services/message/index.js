/**
 * Message Service
 * ===
 *
 * @module messageService
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * MessageService
 * @class
 */
class MessageService {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * A collection of message topics and their subscribers.
   * @private
   * @type {object}
   */
  _subscriptions;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * MessageService
   * @constructor
   */
  constructor() {
    this._subscriptions = {};
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Public Methods
  ////////////////////////////////////////////////////////////////////////////////
  /**
   * Adds a subscriber for a subject.
   * @public
   * @param {string} subject - The subject of the message.
   * @param {function} subscriber - The subscriber to be added.
   */
  subscribe(subject, subscriber) {
    if (!this._subscriptions[subject]) {
      this._subscriptions[subject] = [];
    }
    this._subscriptions[subject].push(subscriber);
  }

  /**
   * Removes a subscriber for a subject.
   * @public
   * @param {string} subject - The subject of the message.
   * @param {function} subscriber - The subscriber to be removed.
   */
  unsubscribe(subject, subscriber) {
    if (!(subject in this._subscriptions)) return;
    const INDEX = this._subscriptions[subject].indexOf(subscriber);

    this._subscriptions[subject].splice(INDEX, 1);
  }

  /**
   * Sends a message to all subscribers for the subject.
   * @param {string} subject - The subject of the message.
   * @param {object} message - The message to be sent.
   */
  send(subject, message) {
    const SUBSCRIBERS = this._subscriptions[subject] || [];

    SUBSCRIBERS.forEach((subscriber) => {
      subscriber(message);
    });
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Private Methods
  ////////////////////////////////////////////////////////////////////////////////


  ////////////////////////////////////////////////////////////////////////////////
  // Static Methods
  ////////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   *
   * @return {MessageService} - A new message service instance.
   */
  static createInstance() {
    return new MessageService();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default MessageService;
