/**
 * Registry
 * ===
 *
 * @module registry
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Registry
 * @class
 */
class Registry {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {object}
   */
  _dependencies;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Registry
   * @constructor
   */
  constructor() {
    this._dependencies = {};
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Registers a class with the container
   * @param {string} name - The name of the class to be registered.
   * @param {object} func - The class to be registered.
   * @param {boolean} singleton - Flag to register the class as a singleton (Default: false)
   */
  registerClass(name, func, singleton = false) {
    if (!(name in this._dependencies)) {
      this._dependencies[name] = func;
    }
  }

  /**
   * Resolves a class and returns an instance.
   * @param {string} name - The name of the class to be resolved.
   */
  resolveClass(name) {
    const CLASS = this._dependencies[name];
    const FN_ARGS = /^class|function\s*[^\(]*\(\s*([^\)]*)\)/m;
    const TEXT = CLASS.toString();

    if (TEXT.match(FN_ARGS)[1] !== '') {
      const DEPENDENCIES = [];
      const ARGUMENTS = TEXT.match(FN_ARGS)[1].split(', ');

      for (let idx = 0; idx < ARGUMENTS.length; idx++) {
        DEPENDENCIES.push(this.resolve(ARGUMENTS[idx]));
      }
      return new CLASS(...DEPENDENCIES);
    } else {
      return new CLASS();
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @return {Registry}
   */
  static createInstance() {
    return new Registry();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Registry;
