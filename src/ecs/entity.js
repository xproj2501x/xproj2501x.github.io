/**
 * Entity
 * ===
 *
 * @module Entity
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import {ComponentAlreadyExistsError, ComponentNotFoundError} from './errors';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////

/**
 * Entity
 * @class
 */
class Entity {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The id of the entity.
   * @private
   * @type {number}
   */
  _id;

  /**
   * The key of the entity.
   * @private
   * @type {number}
   */
  _key;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Get _id
   * @public
   * @readonly
   *
   * @return {number}
   */
  get id() {
    return this._id;
  }

  /**
   * Get _key
   * @public
   * @readonly
   * @return {number}
   */
  get key() {
    return this._key;
  }

  /**
   * Entity
   * @constructor
   * @param {number} id - The id of the entity.
   */
  constructor(id) {
    this._id = id;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Attaches a component type to the entity.
   * @public
   * @param {number} type - The type of component to attach.
   */
  attachComponent(type) {
    if (this.hasComponent(type)) {
      throw new ComponentAlreadyExistsError(`Component type ${type} already attached to entity ${this._id}.`);
    }
    this._key |= (1 << type);
  }

  /**
   * Detaches a component type from the entity.
   * @public
   * @param {number} type - The type of component to detach.
   */
  detachComponent(type) {
    if (!this.hasComponent(type)) {
      throw new ComponentNotFoundError(`Component type ${type} is not attached to entity ${this._id}.`);
    }
    this._key ^= (1 << type);
  }

  /**
   * Verifies that the component type is attached to the entity.
   * @public
   * @param {number} type - The type of component to check.
   *
   * @return {boolean}
   */
  hasComponent(type) {
    return Boolean(this._key & (1 << type));
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Static factory method.
   * @static
   * @param {number} id - The id of the entity.
   *
   * @return {Entity} .
   */
  static createInstance(id) {
    return new Entity(id);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Entity;
