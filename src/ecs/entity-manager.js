/**
 * EntityManager
 * ===
 *
 * @module EntityManager
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Entity from './entity';
import {EntityNotFoundError} from './errors';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * EntityManager
 * @class
 */
class EntityManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * A collection of entities used by the simulation.
   * @private
   * @type {Entity[]}
   */
  _entities;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * EntityManager
   * @constructor
   */
  constructor() {
    this._entities = [];
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Creates a new entity.
   * @public
   *
   * @return {Entity}
   */
  createEntity() {
    const ID = this._entities.length;
    const ENTITY = Entity.createInstance(ID);

    this._entities.push(ENTITY);
    return ENTITY;
  }

  /**
   * Finds the entity with the matching id.
   * @public
   * @param {number} id -
   *
   * @return {Entity}
   */
  findEntity(id) {
    if (!this._entities[id]) throw new EntityNotFoundError(`Entity id ${id} does not exist`);
    return this._entities[id];
  }

  /**
   * Finds all entities with a matching key.
   * @public
   * @param {number} key -
   *
   * @return {number[]}
   */
  findEntitiesWithKey(key) {
    return this._entities.filter((entity) => {
      return ((entity.key & key) === key);
    }).map((entity) => {return entity.id;});
  }

  /**
   * Destroys the entity with a matching id.
   * @public
   * @param {number} id -
   */
  destroyEntity(id) {
    if (!this._entities[id]) throw new EntityNotFoundError(`Entity id ${id} does not exist`);
    this._entities[id] = null;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Static factory method.
   * @static
   *
   * @return {EntityManager}
   */
  static createInstance() {
    return new EntityManager();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default EntityManager;
