/**
 * Binary Tree
 * ===
 *
 * @module binaryTree
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
import BinaryNode from './binary-node';

/**
 * BinaryTree
 * @class
 */
class BinaryTree {
  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _root;
  _size;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * BinaryTree
   * @constructor
   */
  constructor() {
    this._root = null;
    this._size = 0;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Inserts a new node into the binary tree.
   * @param {int} key -
   * @param {object} data -
   */
  insertNode(key, data) {
    const NEW_NODE = BinaryNode.create(key, data);

    if (!this._root) {
      this._root = NEW_NODE;
    } else {
      return -1;
    }
  }

  /**
   *
   * @param {int} key -
   * @param {BinaryNode} currentNode -
   * @return {object}
   */
  getNode(key, currentNode = null) {
    currentNode = currentNode || this._root;
    if (key === currentNode.key) {
      return currentNode.data;
    } else if (key > currentNode.key && currentNode.leftChild) {

    }
  }

  removeNode(key) {

  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @return {BinaryTree}
   */
  static create() {
    return new BinaryTree();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default BinaryTree;
