/**
 * Game Manager
 * ===
 *
 * @module gameManager
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * GameManager
 * @class
 */
class GameManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The logger for the class.
   * @private
   * @type {Logger}
   */
  _logger;

  _games;

  /**
   * @private
   * @type {boolean}
   */
  _isRunning;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * GameManager
   * @constructor
   * @param {LogService} logService - The log service for the application.
   */
  constructor(logService) {
    this._logger = logService.registerLogger(this.constructor.name);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  start() {
    this._isRunning = true;
    requestAnimationFrame(() => this._tick());
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _tick() {
    if (this._isRunning) {
      const CURRENT_TIME = Date.now();

      this._delta += CURRENT_TIME - this._lastRefresh;
      if (this._delta >= MAX_SKIP_DURATION) {
        // this._logger.writeErrorLog(`Delta ${this._delta} is greater than max frame duration ${MAX_SKIP_DURATION}`);
      }
      while (this._delta > FRAME_DURATION) {
        // this._logger.writeInfoLog(`Updating...`);
        this._delta -= FRAME_DURATION;
      }
      // this._logger.writeInfoLog(`Rendering...`);
      this._engine.update();
      this.render();
      this._lastRefresh = CURRENT_TIME;
      // this._logger.writeInfoLog(`Last refresh: ${this._lastRefresh}`);

      requestAnimationFrame(() => this._tick());
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @param {LogService} logService - The log service for the application.
   *
   * @return {GameManager} - A new game manager instance.
   */
  static createInstance(logService) {
    return new GameManager(logService);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default GameManager;
