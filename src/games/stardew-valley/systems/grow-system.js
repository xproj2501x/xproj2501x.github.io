/**
 * Grow System
 * ===
 *
 * @module growSystem
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import System from '../../../engine/system';
import {COMPONENT_TYPE} from '../components';

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * GrowSystem
 * @class
 * @extends System
 */
class GrowSystem extends System {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _components;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * GrowSystem
   * @constructor
   */
  constructor(messageService, componentManager) {
    super(messageService, componentManager);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   *
   */
  update() {
    const GROW_COMPONENTS = this._componentManager.getComponentsOfType(COMPONENT_TYPE.GROW);

    GROW_COMPONENTS.forEach((component) => {
      const STATE = component.state;

      STATE.elapsedTime += 1;
      if ((STATE.elapsedTime === STATE.harvestTime)) {
        this._createHarvest(STATE.harvestItem, STATE.harvestQuantity);
        if (STATE.regrowTime) {
          component.update(STATE);
        } else {
          this._componentManager.destroyComponent(component.type, component.id);
        }

      } else if (STATE.elapsedTime > STATE.harvestTime) {
        if ((STATE.elapsedTime - STATE.harvestTime) % STATE.regrowTime === 0) {
          this._createHarvest(STATE.harvestItem, STATE.harvestQuantity);
          component.update(STATE);
        }
      }
    });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _createHarvest(crop, quantity) {
    // Send message to create a new entity for the crops
  }

  onComponentCreated(message) {

  }

  onComponentDestroyed(message) {

  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {ComponentManager} componentManager -
   *
   * @return {GrowSystem}
   */
  static create(componentManager) {
    return new GrowSystem(componentManager);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default GrowSystem;
