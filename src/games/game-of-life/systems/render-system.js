/**
 * Render System
 * ===
 *
 * @module renderSystem
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import System from '../../../engine/system';
import {COMPONENT_TYPE} from '../components';
import {ASSEMBLAGE_TYPE} from '../assemblages';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const SCALE = 5;

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////

/**
 * RenderSystem
 * @class
 */
class RenderSystem extends System {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _context;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * RenderSystem
   * @constructor
   */
  constructor(logService, messageService) {
    super(logService, messageService, ASSEMBLAGE_TYPE.CELL);

    const CONTAINER = document.getElementById('game-wrapper');
    const CANVAS = document.createElement('canvas');

    CANVAS.height = CONTAINER.clientHeight;
    CANVAS.width = CONTAINER.clientWidth;
    CONTAINER.appendChild(CANVAS);
    this._context = CANVAS.getContext('2d');
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The update routine for the system.
   * @param {number} delta
   */
  update(delta) {
    this._context.save();
    this._context.clearRect(0, 0, this._context.canvas.width, this._context.canvas.height);
    for (const KEY in this._assemblages) {
      if (this._assemblages.hasOwnProperty(KEY)) {
        const ASSEMBLAGE = this._assemblages[KEY];


        this._context.fillStyle = ASSEMBLAGE[COMPONENT_TYPE.SPRITE].color;
        this._context.fillRect((ASSEMBLAGE[COMPONENT_TYPE.POSITION].x * SCALE), (ASSEMBLAGE[COMPONENT_TYPE.POSITION].y * SCALE), SCALE, SCALE);

      }
    }
    this._context.restore();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @param {MessageService} messageService - The message service for the simulation.
   *
   * @return {RenderSystem} A new game of life instance.
   */
  static createInstance(messageService) {
    return new RenderSystem(messageService);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default RenderSystem;
