/**
 * Render System
 * ===
 *
 * @module renderSystem
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import System from '../../../engine/system';
import {COMPONENT_TYPE} from '../components';
import {ASSEMBLAGE_TYPE} from '../assemblages';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const SCALE = 5;

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////

/**
 * RenderSystem
 * @class
 */
class RenderSystem extends System {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _context;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * RenderSystem
   * @constructor
   */
  constructor(logService, messageService) {
    super(logService, messageService, ASSEMBLAGE_TYPE.CELL);

    const CONTAINER = document.getElementById('game-wrapper');
    const CANVAS = document.createElement('canvas');

    CANVAS.height = CONTAINER.clientHeight;
    CANVAS.width = CONTAINER.clientWidth;
    CONTAINER.appendChild(CANVAS);
    this._context = CANVAS.getContext('2d');
    this._x = 100;
    this._y = 100;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The update routine for the system.
   * @param {array} assemblages - A collection of assemblages used by system.
   */
  update(assemblages) {
    this._context.save();
    this._context.clearRect(0, 0, this._context.canvas.width, this._context.canvas.height);
    let sprite;
    let position;
    assemblages.forEach((assemblage) => {

      sprite = assemblage.getComponent(COMPONENT_TYPE.SPRITE);
      position = assemblage.getComponent(COMPONENT_TYPE.POSITION);

      this._context.fillStyle = sprite.color;
      this._context.fillRect((position.x * SCALE), (position.y * SCALE), SCALE, SCALE);

    });
    this._context.restore();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @param {MessageService} messageService - The message service for the simulation.
   *
   * @return {RenderSystem} A new game of life instance.
   */
  static createInstance(messageService) {
    return new RenderSystem(messageService);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default RenderSystem;
