/**
 * Rule Component
 * ===
 *
 * @module positionComponent
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Component from '../../../engine/component';
import {InvalidComponentState} from '../../../engine/exceptions';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const KEYS = {
  life: 'string',
  death: 'string',
  cycle: 'number'
};

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * PositionComponent
 * @class
 */
class PositionComponent extends Component {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * PositionComponent
   * @constructor
   * @param {string} id - The id of the parent entity.
   * @param {string} type - The type of the component.
   * @param {object} state - The state of the component.
   */
  constructor(id, type, state) {
    super(id, type, state);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Static factory method.
   * @static
   * @param {string} id - The id of the parent entity.
   * @param {number} type - The type of the component.
   * @param {object} state - The state of the component.
   *
   * @throws {InvalidComponentState}
   * @return {PositionComponent} - A new component instance.
   */
  static createInstance(id, type, state) {
    for (const KEY in KEYS) {
      if (!state.hasOwnProperty(KEY)) {
        throw new InvalidComponentState(`Error: Invalid state, key ${KEY} not found for component type ${type}.`);
      }
    }
    for (const KEY in state) {
      if (!KEYS.hasOwnProperty(KEY)) {
        throw new InvalidComponentState(`Error: Invalid state, key ${KEY} is not valid for component type ${type}.`);
      }
      if (typeof state[KEY] !== KEYS[KEY]) {
        throw new InvalidComponentState(
          `Error: Invalid state, key ${KEY} for component type ${type} should be of type ${KEYS[KEY]}.`);
      }
    }
    return new PositionComponent(id, type, state);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default PositionComponent;
