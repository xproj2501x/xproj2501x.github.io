/**
 * PositionComponent
 * ===
 *
 * @module game.Components.PositionComponent
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Component from '../../data-manager/component';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const TEMPLATE = {
  x: 'number',
  y: 'number'
};

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * PositionComponent
 * @class
 * @extends Component
 */
class PositionComponent extends Component {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @public
   * @reaodnly
   * @return {number}
   */
  get x() {
    return this.state.x;
  }

  /**
   * @public
   * @readonly
   * @return {number}
   */
  get y() {
    return this.state.y;
  }

  /**
   * PositionComponent
   * @constructor
   * @param {number} id - The id of the parent entity.
   * @param {number} type - The type of the component.
   * @param {object} state - The state of the component.
   */
  constructor(id, type, state) {
    super(id, type, state);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Static factory method.
   * @static
   * @param {number} id - The id of the parent entity.
   * @param {number} type - The type of the PositionComponent.
   * @param {object} template - The template for the PositionComponent.
   * @param {object} state - The state of the PositionComponent.
   *
   * @return {PositionComponent} A new position component instance.
   */
  static createInstance(id, type, template, state) {
    return new PositionComponent(id, type, state);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default PositionComponent;
