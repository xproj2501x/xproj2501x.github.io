/**
 * World
 * ===
 *
 * @module world
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Creature from './creature';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const CHARACTERS = 'abcdefghijklmnopqrstuvwxyz ';
const TARGET = 'to be or not to be';
const TOTAL_POPULATION = 150;
const MUTATION_RATE = 0.01;

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * World
 * @class
 */
class World {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _generation;
  _population;
  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * World
   * @constructor
   */
  constructor() {
    this._generation = 0;
    this._population = [];
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  step() {
    if (this._population[this._generation - 1]) {
      const CURRENT_POPULATION = this._population[this._generation - 1];
      const MATING_POOL = [];

      for (let idx = 0; idx < CURRENT_POPULATION.length; idx++) {
        const CREATURE = CURRENT_POPULATION[idx];
        let score = 0;

        for (let jdx = 0; jdx < CREATURE.genes.length; jdx++) {
          if (CREATURE.genes[jdx] === TARGET[jdx]) {
            score++;
          }
        }
        const FITNESS = score / TARGET.length;

        for (let jdx = 0; jdx < (FITNESS * 100); jdx++) {
          MATING_POOL.push(CREATURE);
        }
      }
      for (let idx = 0; idx < CURRENT_POPULATION.length; idx++) {

      }
    } else {
      const CURRENT_POPULATION = [];

      for (let idx = 0; idx < TOTAL_POPULATION; idx++) {
        const DNA = [];

        for (let jdx = 0; jdx < TARGET.length; jdx++) {
          DNA[idx] = CHARACTERS.substr((Math.floor(Math.random() * CHARACTERS.length)), 1);
        }
        const CREATURE = Creature.createInstance(DNA.join(''));

        CURRENT_POPULATION.push(CREATURE);
        this._population[this._generation] = CURRENT_POPULATION;
      }
    }
    this._generation++;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   *
   */
  static createInstance() {
    return new World();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default World;
