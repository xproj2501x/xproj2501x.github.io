/**
 * Game Builder
 * ===
 *
 * @module game.Builders.GameBuilder
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import PopulationBuilder from './population-builder';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const DEFAULT_OPTIONS = {
  maxPopulation: 150,
  worldHeight: 60,
  worldWidth: 80
};

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * GameBuilder
 * @class
 */
class GameBuilder {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {PRNG}
   */
  _prng;

  /**
   * @private
   * @type {DataManager}
   */
  _dataManager;

  /**
   * @private
   * @type {object}
   */
  _options;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * GameBuilder
   * @constructor
   */
  constructor(prng, dataManager, options) {
    this._prng = prng;
    this._dataManager = dataManager;
    this._options = options;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   *
   */
  build() {
    this._buildCreatures();
  }


  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _buildWorld() {

  }

  _buildCreatures() {
    const BUILDER = PopulationBuilder.createInstance(this._prng, this._options);
    const CREATURES = BUILDER.build();

    this._createEntities(CREATURES);
  }

  _createEntities(entities) {
    entities.forEach((entity) => {
      this._dataManager.createEntity(entity);
    });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @param {PRNG} prng - The pseudo random number generator for the simulation.
   * @param {object} options - The options for the builder.
   *
   * @return {GameBuilder} A new game builder instance.
   */
  static createInstance(prng, dataManager, options) {
    options = options || DEFAULT_OPTIONS;
    return new GameBuilder(prng, dataManager, options);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default GameBuilder;
